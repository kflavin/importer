######################################
# Queries
######################################

# Limit files to those that have been downloaded after the last successful import, so we
# don't overwrite new data with old.
GET_FILES = """
    SELECT * FROM "{table_name}" WHERE id > (
        SELECT COALESCE(MAX(id), 0) AS maxid
        FROM "{table_name}"
        WHERE period='{period}'
        AND environment='{environment}'
        AND imported = true
    )
    AND imported = false
    AND environment='{environment}'
    AND period='{period}'
    ORDER BY created_at DESC, id DESC
    LIMIT {limit};
"""

# For the monthly files, just change the order so we're loading the most recent monthly file.  We
# shouldn't try to load more than one monthly file at a time.
GET_MONTHLY_FILES = """
    SELECT * FROM "{table_name}" WHERE id > (
        SELECT COALESCE(MAX(id), 0) AS maxid
        FROM "{table_name}"
        WHERE period='{period}'
        AND environment='{environment}'
        AND imported = true
    )
    AND imported = false
    AND environment='{environment}'
    AND period='{period}'
    ORDER BY created_at DESC, id DESC
    LIMIT 1;
"""

######################################
# Inserts and Updates
######################################

# Mark a zip as imported in the log table
MARK_AS_IMPORTED = """
    UPDATE "{table_name}"
    SET imported = true, attempts = attempts + 1, updated_at=now()
    WHERE id = {id};
"""

# Insert rows into the NPI table
INSERT_QUERY = """
    INSERT INTO {table_name}
    ({cols}, created_at, updated_at)
    VALUES ({values}, now(), now())
    ON CONFLICT (npi) DO UPDATE
    SET {on_dupe_values}, updated_at=now()
"""

# Used for deactivated NPI's.  We want to keep old data, so just mark them as deactivated, don't
# zero out all data.  Update empty date values so they are inserted as NULL instead of '0000-00-00'
UPDATE_QUERY = """
    UPDATE {table_name} SET
    "npi_deactivation_date"={npi_deactivation_date},
    "npi_reactivation_date"={npi_reactivation_date},
    "last_update_date"={last_update_date},
    "provider_enumeration_date"={provider_enumeration_date}
    WHERE "npi"={npi}
"""

# Optional query which can be used for large files
INSERT_LARGE_QUERY = """
    LOAD DATA LOCAL INFILE '{infile}' INTO TABLE {table_name}
    FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    LINES TERMINATED BY '\n'
    IGNORE 1 LINES;
"""

# Insert a new row into the import log table
INSERT_NEW_FILE = """
    INSERT INTO {table_name}
    ({cols}, updated_at, created_at)
    VALUES ({values}, now(), now())
"""

######################################
# Create Tables
#  These shouldn't be needed outside
#  of testing.  In "real" DB's these
#  have been created by migrations in
#  the app.
######################################

# Create NPI log table.  Used only for dev, refer to api-ruby migration for accurate table.
CREATE_NPI_IMPORT_LOG_TABLE = """
    CREATE TABLE "{table_name}" (
    "id" int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "url" varchar(255) NOT NULL,
    "environment" varchar(50) NOT NULL,
    "imported" bool DEFAULT false,
    "attempts" int8 DEFAULT '0'::bigint,
    "period" bpchar(1),
    "updated_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY ("id")
    )
"""
# UNIQUE KEY "url_per_env" ("url","environment")

# Create NPI table.  Used only for dev, refer to api-ruby migration for accurate table.
CREATE_NPI_TABLE = """
    CREATE TABLE "{table_name}" (
    "id" int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "npi" int8 NOT NULL,
    "entity_type_code" int4,
    "replacement_npi" int8,
    "employer_identification_number_ein" varchar(9),
    "provider_organization_name_legal_business_name" varchar(70),
    "provider_last_name_legal_name" varchar(35),
    "provider_first_name" varchar(20),
    "provider_middle_name" varchar(20),
    "provider_name_prefix_text" varchar(5),
    "provider_name_suffix_text" varchar(5),
    "provider_credential_text" varchar(20),
    "provider_other_organization_name" varchar(70),
    "provider_other_organization_name_type_code" varchar(1),
    "provider_other_last_name" varchar(35),
    "provider_other_first_name" varchar(20),
    "provider_other_middle_name" varchar(20),
    "provider_other_name_prefix_text" varchar(5),
    "provider_other_name_suffix_text" varchar(5),
    "provider_other_credential_text" varchar(20),
    "provider_other_last_name_type_code" int4,
    "provider_first_line_business_mailing_address" varchar(55),
    "provider_second_line_business_mailing_address" varchar(55),
    "provider_business_mailing_address_city_name" varchar(40),
    "provider_business_mailing_address_state_name" varchar(40),
    "provider_business_mailing_address_postal_code" varchar(20),
    "provider_business_mailing_address_country_code" varchar(2),
    "provider_business_mailing_address_telephone_number" varchar(20),
    "provider_business_mailing_address_fax_number" varchar(20),
    "provider_first_line_business_practice_location_address" varchar(55),
    "provider_second_line_business_practice_location_address" varchar(55),
    "provider_business_practice_location_address_city_name" varchar(40),
    "provider_business_practice_location_address_state_name" varchar(40),
    "provider_business_practice_location_address_postal_code" varchar(20),
    "provider_business_practice_location_address_country_code" varchar(2),
    "provider_business_practice_location_address_telephone_number" varchar(20),
    "provider_business_practice_location_address_fax_number" varchar(20),
    "provider_enumeration_date" date,
    "last_update_date" date,
    "npi_deactivation_reason_code" varchar(2),
    "npi_deactivation_date" date,
    "npi_reactivation_date" date,
    "provider_gender_code" varchar(1),
    "authorized_official_last_name" varchar(35),
    "authorized_official_first_name" varchar(20),
    "authorized_official_middle_name" varchar(20),
    "authorized_official_title_or_position" varchar(35),
    "authorized_official_telephone_number" varchar(20),
    "healthcare_provider_taxonomy_code_1" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_1" varchar(1),
    "healthcare_provider_taxonomy_code_2" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_2" varchar(1),
    "healthcare_provider_taxonomy_code_3" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_3" varchar(1),
    "healthcare_provider_taxonomy_code_4" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_4" varchar(1),
    "healthcare_provider_taxonomy_code_5" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_5" varchar(1),
    "healthcare_provider_taxonomy_code_6" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_6" varchar(1),
    "healthcare_provider_taxonomy_code_7" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_7" varchar(1),
    "healthcare_provider_taxonomy_code_8" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_8" varchar(1),
    "healthcare_provider_taxonomy_code_9" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_9" varchar(1),
    "healthcare_provider_taxonomy_code_10" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_10" varchar(1),
    "healthcare_provider_taxonomy_code_11" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_11" varchar(1),
    "healthcare_provider_taxonomy_code_12" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_12" varchar(1),
    "healthcare_provider_taxonomy_code_13" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_13" varchar(1),
    "healthcare_provider_taxonomy_code_14" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_14" varchar(1),
    "healthcare_provider_taxonomy_code_15" varchar(10),
    "healthcare_provider_primary_taxonomy_switch_15" varchar(1),
    "is_sole_proprietor" varchar(1),
    "is_organization_subpart" varchar(1),
    "parent_organization_lbn" varchar(70),
    "parent_organization_tin" varchar(9),
    "authorized_official_name_prefix_text" varchar(5),
    "authorized_official_name_suffix_text" varchar(5),
    "authorized_official_credential_text" varchar(20),
    "created_at" timestamptz,
    "updated_at" timestamptz,
    PRIMARY KEY ("id")
    )
"""

# UNIQUE KEY "npi" ("npi"),
# KEY "postal_code" ("provider_business_practice_location_address_postal_code"),
# KEY "lastname_postalcode" ("provider_last_name_legal_name","provider_business_practice_location_address_postal_code"),
# KEY "firstname_lastname" ("provider_first_name","provider_last_name_legal_name"),
# KEY "address_state" ("provider_business_practice_location_address_state_name")
# )
