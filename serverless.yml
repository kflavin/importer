service: importer

frameworkVersion: ">=1.9.0 <2.0.0"

plugins:
  - serverless-python-requirements
  - serverless-plugin-scripts

custom:
  stage: ${opt:stage, self:provider.stage}
  sshKey: ${env:aws_key}
  awsRegion: ${env:aws_region}
  awsImageId: ${env:aws_image_id}
  awsInstanceType: ${env:aws_instance_type}
  awsSecurityGroups: ${env:aws_security_groups}
  awsRdsSecurityGroup: ${env:aws_rds_security_group}
  subnet1: ${env:aws_subnet_1}
  subnet2: ${env:aws_subnet_2}
  db_host: {"Fn::GetAtt": ["RDS","Endpoint.Address"]}
  db_port: {"Fn::GetAtt": ["RDS","Endpoint.Port"]}
  db_user: ${env:db_user}
  db_password: ${env:db_password}
  db_schema: ${env:db_schema}
  instance_profile: ${env:instance_profile}
  pythonRequirements:
    dockerizePip: false
  scripts:
    hooks:
      'deploy:finalize': bash bin/stage_runner_to_s3.sh

provider:
  name: aws
  region: ${self:custom.awsRegion}
  runtime: python3.6
  environment:
    aws_key: ${self:custom.sshKey}
    aws_region: ${self:custom.awsRegion}
    aws_image_id: ${self:custom.awsImageId}
    aws_instance_type: ${self:custom.awsInstanceType}
    aws_security_groups: ${self:custom.awsSecurityGroups}
    # aws_subnet_1: ${self:custom.subnet1}
    # aws_subnet_2: ${self:custom.subnet2}
    s3_bucket: {Ref: ScriptBucket}
    db_host: ${self:custom.db_host}
    db_port: ${self:custom.db_port}
    db_user: ${self:custom.db_user}
    db_password: ${self:custom.db_password}
    db_schema: ${self:custom.db_schema}
    instance_profile: ${self:custom.instance_profile}
  vpc:
    securityGroupIds:
      - ${self:custom.awsSecurityGroups}
    subnetIds:
      - ${self:custom.subnet1}
      - ${self:custom.subnet2}
      # - "subnet-7ba13b51"
      # - "subnet-f4cb9e82"
    
  iamRoleStatements:
    - Effect: Allow
      Action: "ec2:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - "iam:PassRole"
        - "ec2:DescribeSecurityGroups"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeVpcs"
      Resource: "*"
    - Effect: Allow
      Action: "s3:*"
      Resource:
        - "Fn::Join":
            - ""
            -
              - {"Fn::GetAtt": ["ScriptBucket","Arn"]}
              - "/*"

functions:
  # Create the initial database
  create_db:
    handler: backend/create_db.handler
  # Testing
  import_npi_ec2:
    handler: backend/import_npi_ec2.handler
  # Import NPI data
  npi_importer:
    handler: backend/import_npi.handler
  # Import NPI data with step function
  npi_step_importer:
    handler: backend/import_npi_step.handler
    timeout: 300
    memory: 1024

resources:
  Outputs:
    ScriptBucket:
      Value: {Ref: ScriptBucket}
  Resources:
    ScriptBucket:
      Type: "AWS::S3::Bucket"
    RDS:
      Type: AWS::RDS::DBInstance
      Properties:
        VPCSecurityGroups:
          - ${self:custom.awsRdsSecurityGroup}
        AllocatedStorage: 10
        # DBInstanceClass: db.t2.micro
        DBInstanceClass: db.m4.large
        Engine: MySQL
        MasterUsername: ${self:custom.db_user}
        MasterUserPassword: ${self:custom.db_password}
        PubliclyAccessible: false
        StorageType: gp2
        # StorageType: Standard
      DeletionPolicy: Delete

package:
  exclude:
    - importer/**
    - importer_env/**
    - env.python/**
    - data/**